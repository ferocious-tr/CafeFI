"""
ðŸŒ± CafeFlow - Test Verisi Ä°Ã§e Aktarma

Ã–rnek malzeme, Ã¼rÃ¼n ve reÃ§ete oluÅŸturur
"""

from src.database import DatabaseEngine
from src.models import Ingredient, Product, Recipe
from decimal import Decimal
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker


def populate_test_data():
    """Test verisi ekle"""
    
    db = DatabaseEngine.create_session()
    
    try:
        print("=" * 60)
        print("ðŸŒ± Test Verisi YÃ¼kleniyor...")
        print("=" * 60)
        
        # ============================================================
        # MALZEME VERÄ°SÄ°
        # ============================================================
        
        ingredients_data = [
            ("Kahve Ã‡ekirdeÄŸi", "g", 0.05),
            ("Su", "ml", 0.001),
            ("Åžeker", "g", 0.02),
            ("SÃ¼t", "ml", 0.015),
            ("Bardak", "adet", 0.25),
            ("PeÃ§ete", "adet", 0.05),
            ("Kakaopor", "g", 0.03),
            ("Bal", "g", 0.04),
            ("Limon", "g", 0.10),
            ("Ã‡ay", "g", 0.025),
        ]
        
        ingredients = {}
        
        for name, unit, cost in ingredients_data:
            existing = db.query(Ingredient).filter(Ingredient.name == name).first()
            if not existing:
                ing = Ingredient(
                    name=name,
                    unit=unit,
                    cost_per_unit=cost,
                    quantity=1000 if unit == "g" else 5000 if unit == "ml" else 100
                )
                db.add(ing)
                db.flush()
                ingredients[name] = ing
                print(f"âœ“ Malzeme: {name} ({unit}) - â‚º{cost}")
            else:
                ingredients[name] = existing
        
        db.commit()
        
        # ============================================================
        # ÃœRÃœN VERÄ°SÄ°
        # ============================================================
        
        # Kahve kategorisini al
        category = db.query(__import__('src.models', fromlist=['Category']).Category).filter_by(name="SÄ±cak Ä°Ã§ecekler").first()
        
        if category:
            products_data = [
                ("Sade Kahve", "KAHVE-001", 30.0, 8.0, "Ä°nce Ã¶ÄŸÃ¼tÃ¼lmÃ¼ÅŸ sade kahve"),
                ("TatlÄ±lÄ± Kahve", "KAHVE-002", 35.0, 8.0, "Åžekerli sade kahve"),
                ("SÃ¼tlÃ¼ Kahve", "KAHVE-003", 40.0, 8.0, "Kahve + SÃ¼t karÄ±ÅŸÄ±mÄ±"),
                ("TÃ¼rk Ã‡ayÄ±", "Ã‡AY-001", 15.0, 8.0, "SÄ±cak tÃ¼rk Ã§ayÄ±"),
                ("Limonlu Ã‡ay", "Ã‡AY-002", 18.0, 8.0, "Ã‡ay + Limon"),
            ]
            
            products = {}
            
            for name, code, margin, kdv, desc in products_data:
                existing = db.query(Product).filter(Product.code == code).first()
                if not existing:
                    prod = Product(
                        name=name,
                        code=code,
                        category_id=category.id,
                        price=0,
                        quantity=100,
                        min_stock_level=10,
                        profit_margin_value=Decimal(str(margin)),
                        kdv_rate=Decimal(str(kdv)),
                        description=desc
                    )
                    db.add(prod)
                    db.flush()
                    products[name] = prod
                    print(f"âœ“ ÃœrÃ¼n: {name} (Kar MarjÄ±: %{margin}, KDV: %{kdv})")
                else:
                    products[name] = existing
            
            db.commit()
            
            # ============================================================
            # REÃ‡ETE VERÄ°SÄ°
            # ============================================================
            
            recipes_data = [
                ("Sade Kahve", [
                    ("Kahve Ã‡ekirdeÄŸi", 7, "g"),
                    ("Su", 150, "ml"),
                    ("Bardak", 1, "adet"),
                ]),
                ("TatlÄ±lÄ± Kahve", [
                    ("Kahve Ã‡ekirdeÄŸi", 7, "g"),
                    ("Su", 150, "ml"),
                    ("Åžeker", 5, "g"),
                    ("Bardak", 1, "adet"),
                ]),
                ("SÃ¼tlÃ¼ Kahve", [
                    ("Kahve Ã‡ekirdeÄŸi", 5, "g"),
                    ("Su", 100, "ml"),
                    ("SÃ¼t", 100, "ml"),
                    ("Åžeker", 3, "g"),
                    ("Bardak", 1, "adet"),
                ]),
                ("TÃ¼rk Ã‡ayÄ±", [
                    ("Ã‡ay", 3, "g"),
                    ("Su", 250, "ml"),
                    ("Bardak", 1, "adet"),
                ]),
                ("Limonlu Ã‡ay", [
                    ("Ã‡ay", 3, "g"),
                    ("Su", 250, "ml"),
                    ("Limon", 10, "g"),
                    ("Bardak", 1, "adet"),
                ]),
            ]
            
            for product_name, recipe_items in recipes_data:
                if products.get(product_name):
                    prod = products[product_name]
                    existing_recipes = db.query(Recipe).filter_by(product_id=prod.id).count()
                    
                    if existing_recipes == 0:
                        for ing_name, qty, unit in recipe_items:
                            if ingredients.get(ing_name):
                                recipe = Recipe(
                                    product_id=prod.id,
                                    ingredient_id=ingredients[ing_name].id,
                                    quantity=qty,
                                    unit=unit
                                )
                                db.add(recipe)
                        
                        db.commit()
                        print(f"âœ“ ReÃ§ete: {product_name}")
        
        print("=" * 60)
        print("âœ“ Test verisi baÅŸarÄ±yla yÃ¼klendi!")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"âœ— Hata: {str(e)}")
        db.rollback()
        return False
    finally:
        db.close()


if __name__ == "__main__":
    populate_test_data()
